package gen

import (
	"bytes"
	"fmt"
	"github.com/xiaoyou-bilibili/xorm/driver"
	"github.com/xiaoyou-bilibili/xorm/utils"
	"log"
	"reflect"
)

type TableField struct {
	FieldName string `xorm:"COLUMN_NAME"`
	FieldType string `xorm:"DATA_TYPE"`
	IsNull    string `xorm:"IS_NULLABLE"`
}

type GenerateConfig struct {
	Path string
	Pkg  string
}

func getTableFields(db driver.DbInstance, table string) ([]*TableField, error) {
	res, err := db.RowQuery("select `COLUMN_NAME`,`DATA_TYPE`,`IS_NULLABLE` from information_schema.columns where table_schema = ? and table_name = ? ORDER BY ORDINAL_POSITION", db.DataBaseName(), table)
	if err != nil {
		return nil, err
	}
	fields, err := utils.ConvertRows2Struct(res, reflect.TypeOf(&TableField{}))
	if err != nil {
		return nil, err
	}
	return fields.([]*TableField), err
}

func getFieldType(field string) string {
	switch field {
	case "int", "bigint":
		return "int64"
	case "tinyint":
		return "int32"
	case "varchar", "json", "text":
		return "string"
	case "bit":
		return "bool"
	case "timestamp":
		return "timestamp"
	case "float":
		return "float64"
	default:
		return "interface{}"
	}
}

func GenerateCode(db driver.DbInstance, tables []string, config GenerateConfig) error {
	// 先判断一下路径是否存在
	if !utils.IsDir(config.Path) {
		return fmt.Errorf("路径 %s 不存在", config.Path)
	}
	// 生成总包
	pkg := fmt.Sprintf("// Code generated by xiaoyou-bilibili/xorm. DO NOT EDIT.\npackage %s \n", config.Pkg)
	if err := globalGen(bytes.NewBufferString(pkg), tables, config.Path); err != nil {
		return err
	}

	// 遍历所有表
	for _, table := range tables {
		log.Printf("generate tabe %s", table)
		// 获取表里面的字段
		fields, err := getTableFields(db, table)
		if err != nil {
			log.Printf("generate table %s err : %v", table, err)
			continue
		}
		// 字段组装
		for i, field := range fields {
			fields[i].FieldType = getFieldType(field.FieldType)
		}
		// 生成模型
		if err := modelGen(bytes.NewBufferString(pkg), table, fields, config.Path); err != nil {
			log.Printf("generate model %s err : %v", table, err)
			continue
		}
		// 生成查询条件
		if err := queryGen(bytes.NewBufferString(pkg), table, fields, config.Path); err != nil {
			log.Printf("generate query %s err : %v", table, err)
			continue
		}
	}
	return nil
}
